package org.repository;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import org.model.AlumniModel;
import org.model.BatchModel;
import org.model.DepartmentModel;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementSetter;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

@Repository("deptrepo")
public class DepartmentRespositoryImpl implements Departmentrepository {

	@Autowired
	JdbcTemplate template;

	@Override
	public boolean isDepartmentAded(DepartmentModel dmodel) {
		String deptName = dmodel.getDept_name().trim().toUpperCase();
		int count = template.queryForObject("SELECT COUNT(*) FROM department WHERE UPPER(TRIM(deptname)) = ?",
				new Object[] { deptName }, Integer.class);
		if (count > 0) {
			return false;
		}
		int val = template.update("INSERT INTO department (dept_id, deptname) VALUES (0, ?)", deptName);
		return val > 0;
	}

	@Override
	public List<DepartmentModel> getdept() {
		return template.query("SELECT * FROM department ORDER BY dept_id ASC", new RowMapper<DepartmentModel>() {
			@Override
			public DepartmentModel mapRow(ResultSet rs, int rowNum) throws SQLException {
				DepartmentModel dmodel = new DepartmentModel();
				dmodel.setDept_id(rs.getInt("dept_id"));
				dmodel.setDept_name(rs.getString("deptname"));
				return dmodel;
			}
		});
	}

	@Override
	public void isDepartmentdeleted(int dept_id) {
		template.update("DELETE FROM department WHERE dept_id = ?", dept_id);
	}

	@Override
	public boolean isupdateDepartment(DepartmentModel deptmodel) {

		String deptName = deptmodel.getDept_name().trim().toUpperCase();
		int count = template.queryForObject(
				"SELECT COUNT(*) FROM department WHERE UPPER(TRIM(deptname)) = ? AND dept_id != ?",
				new Object[] { deptName, deptmodel.getDept_id() }, Integer.class);
		if (count > 0) {
			return false;
		}

		int value = template.update("UPDATE department SET deptname = ? WHERE dept_id = ?", deptName,
				deptmodel.getDept_id());
		return value > 0;
	}

	public List<DepartmentModel> getdeptName(Integer Bid) {
		return template.query(
				"SELECT d.dept_id, d.deptname " + "FROM Batch b " + "INNER JOIN Department d ON b.dept_id = d.dept_id  WHERE b.Bid = ?",
				new Object[] { Bid }, // Set the parameter
				new RowMapper<DepartmentModel>() {
					@Override
					public DepartmentModel mapRow(ResultSet rs, int rowNum) throws SQLException {
						DepartmentModel dmodel = new DepartmentModel();
						dmodel.setDept_id(rs.getInt("dept_id"));
						dmodel.setDept_name(rs.getString("deptname"));
						return dmodel;
					}
				});
	}
	public List<AlumniModel> getdeptNamealumni(Integer Aid) {
		return template.query(
				"select am.Aid,am.amname,am.Email,am.Contact,am.Age,am.Company,am.Gender,b.Batch_Year,d.deptname from Alumni am inner join Department d on am.Dept_id=d.Dept_id inner join Batch b on b.Bid=am.Bid where Aid=?",
				new Object[] { Aid }, // Set the parameter
				new RowMapper<AlumniModel>() {
					@Override
					public AlumniModel mapRow(ResultSet rs, int rowNum) throws SQLException {
						AlumniModel amodel = new AlumniModel();
						BatchModel bmodel = new BatchModel();
						amodel.setAid(rs.getInt("Aid"));
						amodel.setName(rs.getString("amname"));
						amodel.setEmail(rs.getString("Email"));
						amodel.setContact(rs.getString("Contact"));
						amodel.setAge(rs.getInt("Age"));
						amodel.setCompany(rs.getString("Company"));
						amodel.setGender(rs.getString("Gender"));
						bmodel.setBatch_year(rs.getString("Batch_Year"));
						
						return amodel;
					}
				});
	}
}
