package org.repository;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import org.model.AlumniModel;
import org.model.BatchModel;
import org.model.DepartmentModel;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementSetter;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

@Repository("batchrepo")
public class BatchrepositoryImpl implements Batchrepository {

    @Autowired
    JdbcTemplate template;

    @Override
    public boolean isBatchYearExist(String batch_year) {
        String sql = "SELECT COUNT(*) FROM Batch WHERE batch_year = ?";
        Integer count = template.queryForObject(sql, new Object[]{batch_year}, Integer.class);
        return count != null && count > 0;
    }

    @Override
    public boolean isBatchAdded(BatchModel bmodel) {
        if (isBatchYearExist(bmodel.getBatch_year())) {
            return false;
        }
        PreparedStatementSetter pstmt = new PreparedStatementSetter() {
            @Override
            public void setValues(PreparedStatement ps) throws SQLException {
                ps.setString(1, bmodel.getBatch_year());
                ps.setInt(2, bmodel.getDept_id());
            }
        };
        int value = template.update("INSERT INTO Batch (batch_year, dept_id) VALUES (?, ?)", pstmt);
        return value > 0;
    }

    @Override
    public List<BatchModel> getlist() {
        RowMapper<BatchModel> rmap = new RowMapper<BatchModel>() {
            @Override
            public BatchModel mapRow(ResultSet rs, int rowNum) throws SQLException {
                BatchModel bmodel = new BatchModel();
                DepartmentModel dmodel = new DepartmentModel();
                bmodel.setBid(rs.getInt("Bid"));
                bmodel.setBatch_year(rs.getString("batch_year"));
                dmodel.setDept_name(rs.getString("Deptname"));
               
                return bmodel;
            }
        };
        List<BatchModel> batches = template.query("SELECT b.Bid, d.Dept_id, b.batch_year, d.Deptname FROM Batch b INNER JOIN Department d ON b.dept_id = d.dept_id", rmap);
        return batches.size() > 0 ? batches : null;
    }

    @Override
    public void deletebatch(int bid) {
        template.update("DELETE FROM Batch WHERE Bid = ?", bid);
    }

    @Override
    public boolean isBatchUpdated(BatchModel bmodel) {
        if (isBatchYearExist(bmodel.getBatch_year())) {
            return false;
        }
        PreparedStatementSetter pstmt = new PreparedStatementSetter() {
            @Override
            public void setValues(PreparedStatement ps) throws SQLException {
                ps.setString(1, bmodel.getBatch_year());
                ps.setInt(2, bmodel.getDept_id());
                ps.setInt(3, bmodel.getBid());
            }
        };
        int value = template.update("UPDATE Batch SET batch_year = ?, dept_id = ? WHERE Bid = ?", pstmt);
        return value > 0;
    }
    public List<AlumniModel> getdeptbatchalumni(Integer Aid) {
		return template.query(
				"select am.Aid,am.amname,am.Email,am.Contact,am.Age,am.Company,am.Gender,b.Batch_Year,d.deptname from Alumni am inner join Department d on am.Dept_id=d.Dept_id inner join Batch b on b.Bid=am.Bid where Aid=?",
				new Object[] { Aid },
				new RowMapper<AlumniModel>() {
					@Override
					public AlumniModel mapRow(ResultSet rs, int rowNum) throws SQLException {
						AlumniModel amodel = new AlumniModel();
						BatchModel bmodel = new BatchModel();
						DepartmentModel dmodel = new DepartmentModel();
						amodel.setAid(rs.getInt("Aid"));
						amodel.setName(rs.getString("amname"));
						amodel.setEmail(rs.getString("Email"));
						amodel.setContact(rs.getString("Contact"));
						amodel.setAge(rs.getInt("Age"));
						amodel.setCompany(rs.getString("Company"));
						amodel.setGender(rs.getString("Gender"));
						bmodel.setBatch_year(rs.getString("Batch_Year"));
						amodel.setbatchmodel(bmodel);
						dmodel.setDept_name(rs.getString("deptname"));
						amodel.setdeptmodel(dmodel);
						return amodel;
					}
				});
	}
}