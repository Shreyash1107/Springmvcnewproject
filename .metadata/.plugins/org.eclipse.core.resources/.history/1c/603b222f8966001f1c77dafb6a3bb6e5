package org.controller;

import java.util.List;
import java.util.Map;

import org.model.DepartmentModel;
import org.service.DepartmentService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
public class DepartmentController {
    @Autowired
    DepartmentService deptservice;

    // Handle GET requests to display the Department page
    @RequestMapping(value = "/department", method = RequestMethod.GET)
    public String getDepartmentPage(Map<String, Object> map, @RequestParam(value = "dept_id", required = false) Integer deptid) {
        List<DepartmentModel> deptlist = deptservice.getdept();
        map.put("deptlist", deptlist);
        
        // If dept_id is present, it indicates an update action, so populate the form with the department data
        if (deptid != null) {
            DepartmentModel dept = deptservice.getDepartmentById(deptid);  // Assuming you have a method to fetch department by ID
            map.put("deptid", dept.getDept_id());
            map.put("deptname", dept.getDept_name());
        }
        
        return "Department";
    }

    // Handle POST requests for saving a new department or updating an existing one
    @RequestMapping(value = "/department", method = RequestMethod.POST)
    public String saveOrUpdateDepartment(DepartmentModel deptmodel, Map<String, Object> map) {
        boolean isUpdate = deptmodel.getDept_id() != null;  // If dept_id is not null, it's an update
        
        if (isUpdate) {
            deptservice.updateDepartment(deptmodel);  // Assuming you have a method to update department
            map.put("message", "Department has been successfully updated.");
        } else {
            boolean b = deptservice.isDepartmentAded(deptmodel);
            if (b) {
                map.put("message", "Department has been successfully added.");
            } else {
                map.put("message", "Failed to add department.");
            }
        }
        
        List<DepartmentModel> deptlist = deptservice.getdept();
        map.put("deptlist", deptlist);
        
        return "Department";
    }

    // Handle requests to delete a department
    @RequestMapping(value = "/delete")
    public String deleteDepartment(@RequestParam("dept_id") Integer dept_id, Map<String, Object> map) {
        deptservice.isDepartmentdeleted(dept_id);
        List<DepartmentModel> deptlist = deptservice.getdept();
        map.put("deptlist", deptlist);
        map.put("message", "Department has been successfully deleted.");
        return "Department";
    }

    // Handle requests to prefill update form
    @RequestMapping(value = "/update")
    public String updateDepartment(@RequestParam("dept_id") Integer deptid, @RequestParam("dept_name") String name,
            Map<String, Object> map) {
        map.put("deptid", deptid);
        map.put("deptname", name);
        return "Department";  // Since the update form is part of the main "Department" JSP page, return "Department".
    }
}
z