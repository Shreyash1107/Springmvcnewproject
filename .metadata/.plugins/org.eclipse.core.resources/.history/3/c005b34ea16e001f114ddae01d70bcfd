package org.repository;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import org.model.BatchModel;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementSetter;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

@Repository("batchrepo")
public class BatchrepositoryImpl implements Batchrepository {

    @Autowired
    JdbcTemplate template;

    // Method to check if a batch with the same year and department ID already exists
    @Override
    public boolean isBatchExist(String batch_year, int dept_id) {
        String sql = "SELECT COUNT(*) FROM Batch WHERE batch_year = ? AND dept_id = ?";
        Integer count = template.queryForObject(sql, new Object[]{batch_year, dept_id}, Integer.class);
        return count != null && count > 0;
    }

    // Method to add a new batch
    @Override
    public boolean isBatchAdded(BatchModel bmodel) {
        if (isBatchExist(bmodel.getBatch_year(), bmodel.getDept_id())) {
            return false; // Batch already exists
        }
        PreparedStatementSetter pstmt = new PreparedStatementSetter() {
            @Override
            public void setValues(PreparedStatement ps) throws SQLException {
                ps.setString(1, bmodel.getBatch_year());
                ps.setInt(2, bmodel.getDept_id());
            }
        };
        int value = template.update("INSERT INTO Batch (batch_year, dept_id) VALUES (?, ?)", pstmt);
        return value > 0;
    }

    // Method to retrieve all batches
    @Override
    public List<BatchModel> getlist() {
        RowMapper<BatchModel> rmap = new RowMapper<BatchModel>() {
            @Override
            public BatchModel mapRow(ResultSet rs, int rowNum) throws SQLException {
                BatchModel bmodel = new BatchModel();
                bmodel.setBid(rs.getInt("Bid"));
                bmodel.setBatch_year(rs.getString("batch_year"));
                bmodel.setDept_id(rs.getInt("dept_id"));
                return bmodel;
            }
        };
        List<BatchModel> batches = template.query("SELECT * FROM Batch", rmap);
        return batches.size() > 0 ? batches : null;
    }

    // Method to delete a batch by ID
    @Override
    public void deletebatch(int bid) {
        template.update("DELETE FROM Batch WHERE Bid = ?", bid);
    }

    // Method to update a batch
    @Override
    public boolean isBatchupdated(BatchModel bmodel) {
        if (isBatchExist(bmodel.getBatch_year(), bmodel.getDept_id())) {
            return false; // Batch with the same year and department ID already exists
        }
        PreparedStatementSetter pstmt = new PreparedStatementSetter() {
            @Override
            public void setValues(PreparedStatement ps) throws SQLException {
                ps.setString(1, bmodel.getBatch_year());
                ps.setInt(2, bmodel.getDept_id());
                ps.setInt(3, bmodel.getBid());
            }
        };
        int value = template.update("UPDATE Batch SET batch_year = ?, dept_id = ? WHERE Bid = ?", pstmt);
        return value > 0;
    }
}
