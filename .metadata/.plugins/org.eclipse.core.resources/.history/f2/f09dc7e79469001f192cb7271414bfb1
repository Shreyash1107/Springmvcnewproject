package org.repository;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import org.model.AlumniModel;
import org.model.BatchModel;
import org.model.DepartmentModel;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementSetter;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

@Repository("amrepo")
public class AlumnirepositoryImpl implements Alumnirepository {
	@Autowired
	JdbcTemplate template;

	public boolean isAlumniadded(AlumniModel amodel) {
		PreparedStatementSetter pstmt = new PreparedStatementSetter() {
			@Override
			public void setValues(PreparedStatement ps) throws SQLException {
				ps.setString(1, amodel.getName());
				ps.setString(2, amodel.getEmail());
				ps.setString(3, amodel.getContact());
				ps.setInt(4, amodel.getAge());
				ps.setString(5, amodel.getCompany());
				ps.setInt(6, amodel.getBid());
				ps.setString(7, amodel.getGender());
				ps.setInt(8, amodel.getDept_id());
			}
		};
		int value = template.update("insert into Alumni values('0',?,?,?,?,?,?,?,?)", pstmt);
		return value > 0 ? true : false;
	}

	public List<AlumniModel> getalumni() {
		RowMapper<AlumniModel> rmap = new RowMapper<AlumniModel>() {

			@Override
			public AlumniModel mapRow(ResultSet rs, int rowNum) throws SQLException {
				AlumniModel amodel = new AlumniModel();
				amodel.setAid(rs.getInt(1));
				amodel.setName(rs.getString(2));
				amodel.setEmail(rs.getString(3));
				amodel.setContact(rs.getString(4));
				amodel.setAge(rs.getInt(5));
				amodel.setCompany(rs.getString(6));
				amodel.setBid(rs.getInt(7));
				amodel.setGender(rs.getString(8));
				amodel.setDept_id(rs.getInt(9));
				return amodel;
			}
		};
		List<AlumniModel> alumnilist = template.query("select *from Alumni", rmap);
		return alumnilist.size() > 0 ? alumnilist : null;
	}

	public void deletealumni(Integer aid) {
		template.update("delete from Alumni where Aid = ?", aid);
	}

	public List<AlumniModel> getdeptwiseAlumni(String deptname) {
		PreparedStatementSetter pstmt = new PreparedStatementSetter() {
			@Override
			public void setValues(PreparedStatement ps) throws SQLException {
				ps.setString(1, deptname);
			}
		};
		RowMapper<AlumniModel> rmap = new RowMapper<AlumniModel>() {
			@Override
			public AlumniModel mapRow(ResultSet rs, int rowNum) throws SQLException {
				AlumniModel amodel = new AlumniModel();
				DepartmentModel dmodel = new DepartmentModel();
				amodel.setName(rs.getString("Name"));
				amodel.setEmail(rs.getString("Email"));
				amodel.setCompany(rs.getString("Company"));
				amodel.setGender(rs.getString("Gender"));
				dmodel.setDept_name(deptname);
				amodel.setdeptmodel(dmodel);
				return amodel;
			}
		};
		List<AlumniModel> deptwisealumni = template.query(
				"select am.Name,am.Email,am.Company,am.Gender,d.deptname from Alumni am inner join Department d on am.Dept_id = d.Dept_id where d.deptname =?",
				pstmt, rmap);
		System.out.println(deptwisealumni);
		return deptwisealumni.size() > 0 ? deptwisealumni : null;
	}

	public List<AlumniModel> getalumnibatches(String batchyear) {
	    PreparedStatementSetter pstmt = new PreparedStatementSetter() {
	        @Override
	        public void setValues(PreparedStatement ps) throws SQLException {
	            ps.setString(1, batchyear);
	        }
	    };
	    
	    RowMapper<AlumniModel> rmapper = new RowMapper<AlumniModel>() {
	        @Override
	        public AlumniModel mapRow(ResultSet rs, int rowNum) throws SQLException {
	            AlumniModel amodel = new AlumniModel();
	            BatchModel bmodel = new BatchModel();
	            amodel.setAid(rs.getInt("Aid"));
	            amodel.setName(rs.getString("Name"));
	            amodel.setEmail(rs.getString("Email"));
	            amodel.setCompany(rs.getString("Company"));
	            amodel.setGender(rs.getString("Gender"));
	            bmodel.setBatch_year(rs.getString("Batch_year")); 
	            amodel.setbatchmodel(bmodel);
	            return amodel;
	        }
	    };
	    List<AlumniModel> alumnibatch = template.query("select am.Aid, am.name as Name, am.email as Email, am.Company, am.Gender, b.Batch_year from Alumni am inner join Batch b on am.Bid = b.Bid where b.Batch_year=?",pstmt,rmapper);
	    return alumnibatch.size() > 0 ? alumnibatch : null;
	}
	public boolean isUpdatealumni(AlumniModel amodel) {
		PreparedStatementSetter pstmt = new PreparedStatementSetter() {
			
			@Override
			public void setValues(PreparedStatement ps) throws SQLException {
				// TODO Auto-generated method stub
				
			}
		};
	}
}